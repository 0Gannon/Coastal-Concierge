// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview An AI agent that answers guest inquiries about a rental property.
 *
 * - answerGuestInquiry - A function that handles guest inquiries.
 * - AnswerGuestInquiryInput - The input type for the answerGuestInquiry function.
 * - AnswerGuestInquiryOutput - The return type for the answerGuestInquiry function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const AnswerGuestInquiryInputSchema = z.object({
  guestQuestion: z.string().describe('The question from the guest.'),
  propertyInformation: z.string().describe('Detailed information about the property, including amenities, instructions, and rules.'),
});
export type AnswerGuestInquiryInput = z.infer<typeof AnswerGuestInquiryInputSchema>;

const AnswerGuestInquiryOutputSchema = z.object({
  answer: z.string().describe('The answer to the guest question.'),
  requiresEscalation: z.boolean().describe('Whether the question requires escalation to a human.'),
});
export type AnswerGuestInquiryOutput = z.infer<typeof AnswerGuestInquiryOutputSchema>;

export async function answerGuestInquiry(input: AnswerGuestInquiryInput): Promise<AnswerGuestInquiryOutput> {
  return answerGuestInquiryFlow(input);
}

const prompt = ai.definePrompt({
  name: 'answerGuestInquiryPrompt',
  input: {schema: AnswerGuestInquiryInputSchema},
  output: {schema: AnswerGuestInquiryOutputSchema},
  prompt: `You are a helpful AI assistant answering questions from guests staying at a short-term rental property. Use the provided property information to answer the guest's question. If you cannot answer the question with the provided information, or if the question requires immediate assistance or involves a serious issue (e.g., safety, security, or significant property damage), indicate that the question requires escalation to a human.

Property Information:
{{{propertyInformation}}}

Guest Question:
{{{guestQuestion}}}

Answer in a friendly and helpful tone.
`,
});

const answerGuestInquiryFlow = ai.defineFlow(
  {
    name: 'answerGuestInquiryFlow',
    inputSchema: AnswerGuestInquiryInputSchema,
    outputSchema: AnswerGuestInquiryOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
